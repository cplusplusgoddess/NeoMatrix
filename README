////////////////////////////////////////////////////////////////////////////////////////////
//   NeoLib - A matrix multiplication and transpose library optimized with STL C++11 threads
//     Author: Amber Rogowicz    July 2018
//           
//	Running matrix_test:		: Usage: matrix_test  | -h | # | [ANY GARBAGE]
//			-h,--help	 		- Show this help message
//			 WITH NO PARAMETERS	- means run single threaded 
//			 # 			 		- run with the Maximum NUMBER_OF_THREADS > 1
//		 	[ANY GARBAGE]		- run with the default NUMBER_OF_THREADS = 4
// 
//------------------------------------------------------------------------------------------
//	The Interface â€ o NeoLib:
//
//		Namespace of NeoLib		: "using namespace neolib"
//		Initializing threading	: initMatLib( int maxThreadCount) ; Runs the library operations threaded with maxThreadCount
//																	or single threaded if maxThreadCount <= 1
//																	NOTE: can be called anytime throughout execution
//		NeoMatrix class			: "Matrix" declaration/instantiation
//		Initialization or fill	: initialize_random() Method random init data of a Matrix distribution range 0.0-9.9
//                 				: Matrix A[4][2]  = 1.4; - Inits all data elements to 1.4
//      Init Constructor		: Matrix(const std::vector<std::vector<T>> & v): Init matrix data with a std::vector 
//      initializer_list		: Matrix A =  { {2.0 , 3.0, 4.0 },
//												{ 1.3, 4.7, 1.3 }} ; inits A[2][3]
//		Multiply 				: "*" operator of 2 or more instantiated Matrix 
//		         				: "*=" operator of an instantiated Matrix 
//		Transpose				: transpose() method of a Matrix
//		Error Handling			: Currently exits application with an assert() failure
//
//  ------------------------- Nitty Gritty ---------------------------
//   NeoMatrix Data Structure:
//				Using the STL valarray class template provides numeric operations and 
//              element access in the form of slices, an intuitive matrix row/column part
//              of the matrix 
//              Lets review the multiply operation of a matrix:
//                  let m = number of rows in A 
//                      n = number of columns in A  and number of rows in B
//                      p = number of columns in B
//                  then MatrixResult[mxp] = A * B
//
//              MatrixA[mxn] * MatrixB[nxp] = MatrixResult[mxp] 
//    MatrixResult  | 1 ------> p |       A  | 1 -->n  |      B  | 1 ------> p  |
//                  | .           |          | .    .  |         | .         .  |
//                  | .        .  |    =     | .    .  |   *     | V         .  |
//                  | V           |          | V    .  |`        | n         .  |
//                  | m        .  |          | m    .  |        
//
// Non-threaded solution:
//
// NEOMX multiply(const NEOMX & matrixB) const
// {
//	assert(cols == matrixB.rows);   // becomes a no-op if invalid operation
//	STDVA matrixResult(rows * matrixB.cols);
//	for(size_t i = 0; i < rows; ++i)
//	{
//		for(size_t j = 0; j < matrixB.cols; ++j)
//		{
//			STDVA row = data[std::slice(i * cols, cols, 1)];
//			STDVA col = matrixB.data[std::slice(j, m.rows, m.cols)];
//			matrixResult[i * matrixB.cols + j] = (row * col).sum();
//		}
//	}
//       // return a NeoMatrix instatiated with matrixResult data values
//		return NEOMX(rows, m.cols, matrixResult);
//
// }
//
// Threaded solution:
//    The number of threads is a command line tuning parameter (defaulted to 4 
//    The multiply() method accepts a designated block of the result matrix to work on and those 
//    blocks divided up amongst the number of threads (with any remaining handed over to the last thread)
//    The multiply method should handle block assignments with threads sharing equal work loads (distributive
//    processing). 
//
//
//  To simplify, the use of STL C++11 threads are employed and contained in a vector array
//  std::thread threads[NUM_THREADS];
//
//	for (int i = 0; i < NUM_THREADS; ++i) 
//  {
// 		//Initialize each thread with the function responsible of multiplying only a part of the matrices
//      threads[i] = std::thread(multiply_block, &resultMatrix, startRow, numRows, &matrix1, &matrix2);
//  }

// for (int i = 0; i < NUM_THREADS; ++i) 
// {
//   // Regroup when threads have completed their job
//  threads[i].join();
// }
//
// void multiply_block(valarray & result, const size_t startIdx, const size_t endIdx, const NeoMX& m1, const NeoMX& m2);
// the blocks will be split up by the number of result matrix rows divided by the the number of threads
// Result[mxp] = NUM_ELEMENTS / NUM_THREADS = number of element indices  = BLOCK_SIZE 
// so threads 1-NUM_THREADS will do block indices [ THREAD_IDX * BLOCK_SIZE ] += BLOCK_SIZE (+ remainder for last thread)kjjj
//
//
